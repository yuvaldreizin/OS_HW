HW1/commands.c:		if (globals->pwd_pointers[id]) free(globals->pwd_pointers[id]);
HW1/commands.c:		globals->pwd_pointers[id] = getcwd(NULL, 0); 
HW1/commands.c:		if (globals->pwd_pointers[id]){
HW1/commands.c:			printf("%s\n", globals->pwd_pointers[id]);
HW1/commands.c:			free(globals->pwd_pointers[id]);
HW1/commands.c:			globals->pwd_pointers[id] = NULL;
HW1/commands.c:	if (!globals->cur_path) { // set path the first time cd is called
HW1/commands.c:		globals->cur_path = getcwd(NULL, 0);
HW1/commands.c:		if(!globals->last_path){
HW1/commands.c:			if (globals->cur_path) {
HW1/commands.c:				free(globals->cur_path);
HW1/commands.c:				globals->cur_path = NULL;
HW1/commands.c:			globals->cur_path = globals->last_path;
HW1/commands.c:			globals->last_path = getcwd(NULL, 0);
HW1/commands.c:			chdir(globals->cur_path);
HW1/commands.c:			if (globals->last_path) {
HW1/commands.c:				free(globals->last_path);
HW1/commands.c:				globals->last_path = NULL;
HW1/commands.c:			globals->last_path = globals->cur_path;
HW1/commands.c:			globals->cur_path = getcwd(NULL, 0);
HW1/commands.c:	printJobList(globals->jobList);
HW1/commands.c:	job_t curr_job = globals->jobList->jobs[jobID];
HW1/commands.c:		} else if (getStatus(globals->jobList->jobs[jobID]) != STOPPED) {
HW1/commands.c:	job_t curr_job = globals->jobList->jobs[jobID];
HW1/commands.c:			if (globals->jobList->count == 0) break; // no jobs in the list
HW1/commands.c:				job_t curr_job = globals->jobList->jobs[i];
HW1/commands.c:	if (globals->file1[id]) fclose(globals->file1[id]);
HW1/commands.c:	if (globals->file2[id]) fclose(globals->file2[id]);
HW1/commands.c:	globals->file1[id] = fopen(curr_cmd->args[FIRST_ARG], "r");
HW1/commands.c:	if (!globals->file1[id]){
HW1/commands.c:	globals->file2[id] = fopen(curr_cmd->args[SECOND_ARG], "r");
HW1/commands.c:	if (!globals->file2[id]){
HW1/commands.c:		fclose(globals->file1[id]);
HW1/commands.c:		char *ptr1 = fgets(line1, DIFF_LINE_SIZE, globals->file1[id]);
HW1/commands.c:		char *ptr2 = fgets(line2, DIFF_LINE_SIZE, globals->file2[id]);
HW1/commands.c:			} else if (feof(globals->file1[id]) && feof(globals->file2[id])){
HW1/commands.c:				fclose(globals->file1[id]);
HW1/commands.c:				fclose(globals->file2[id]);
HW1/commands.c:				globals->file1[id] = NULL;
HW1/commands.c:				globals->file2[id] = NULL;
HW1/commands.c:	fclose(globals->file1[id]);
HW1/commands.c:	fclose(globals->file2[id]);
HW1/commands.c:	globals->file1[id] = NULL;
HW1/commands.c:	globals->file2[id] = NULL;
HW1/commands.c:			globals->fgJob->pid = id;
HW1/jobs.c:    jobList_t globJobList = globals->jobList;
HW1/jobs.c:    jobList_t globJobList = globals->jobList;
HW1/jobs.c:    jobList_t globJobList = globals->jobList;
HW1/jobs.c:    jobList_t globJobList = globals->jobList;
HW1/jobs.c:    jobList_t globJobList = globals->jobList;
HW1/jobs.c:    globals->fgJob = globJobList->jobs[ID];
HW1/jobs.c:    jobList_t globJobList = globals->jobList;
HW1/jobs.c:    jobList_t globJobList = globals->jobList;
HW1/jobs.c:    jobList_t globJobList = globals->jobList;
HW1/jobs.c:    jobList_t globJobList = globals->jobList;
HW1/jobs.c:    if (globals->jobList->count == 0) {
HW1/jobs.c:    if (globals->jobList->count == 0) {
HW1/signals.c:    if(getpid() == globals->smash_pid) {
HW1/signals.c:        printf("smash: process %d was killed\n", globals->fgJob->pid); 
HW1/signals.c:        destroyJob(globals->fgJob); // destroy the foreground job
HW1/signals.c:        globals->fgJob = NULL; // clear the foreground job
HW1/signals.c:    if(getpid() == globals->smash_pid) {
HW1/signals.c:        if (globals->fgJob) { // no command in FOREGROUND
HW1/signals.c:            job_t curr_job = globals->fgJob;
HW1/signals.c:            globals->fgJob = NULL; // clear the foreground job
HW1/smash.c:	if ((globals->fgJob)) destroyJob(globals->fgJob);
HW1/smash.c:		if (globals->pwd_pointers[i]) free(globals->pwd_pointers[i]);
HW1/smash.c:		if (globals->file1[i]) fclose(globals->file1[i]);
HW1/smash.c:		if (globals->file2[i]) fclose(globals->file2[i]);
HW1/smash.c:	globals->jobList = initJobList();
HW1/smash.c:	globals->last_path = NULL;
HW1/smash.c:	globals->cur_path = NULL;
HW1/smash.c:	globals->fgJob = NULL;
HW1/smash.c:		globals->pwd_pointers[i] = NULL;
HW1/smash.c:		globals->file1[i] = NULL;
HW1/smash.c:		globals->file2[i] = NULL;
HW1/smash.c:	globals->smash_pid = getpid();
HW1/smash.c:				globals->fgJob = initJob(_line, FOREGROUND, 0); 
HW2/account.c:    rwlock_acquire_read(&(globals->account_lock));
HW2/account.c:    for (int i = 0; i < globals->num_accounts; i++){
HW2/account.c:        account *acnt = (account*)g_list_nth_data(globals->accounts, i);
HW2/account.c:            rwlock_release_read(&(globals->account_lock));
HW2/account.c:    rwlock_release_read(&(globals->account_lock));
HW2/account.c:        fprintf(globals->log_file, "Error %d: Your transaction failed - account id %d does not exist\n", atm_id, id);
HW2/account.c:        fprintf(globals->log_file, "Error %s: Your transaction failed - password for account id %d is incorrect\n", atm_id, id);
HW2/account.c:    rwlock_acquire_read(&(globals->account_lock));
HW2/account.c:    for (int i = 0; i < globals->num_accounts; i++){
HW2/account.c:        account *acnt = (account*)g_list_nth_data(globals->accounts, i);
HW2/account.c:            rwlock_release_read(&(globals->account_lock));
HW2/account.c:    rwlock_release_read(&(globals->account_lock));
HW2/account.c:        fprintf(globals->log_file, "Error %d: Your transaction failed - account id %d does not exist\n", atm_id, id);
HW2/account.c:        fprintf(globals->log_file, "Error %s: Your transaction failed - password for account id %d is incorrect\n", atm_id, id);
HW2/account.c:        fprintf(globals->log_file, "Error %d: Your transaction failed - account with the same id exists\n", atm_id);
HW2/account.c:    rwlock_acquire_write(&(globals->account_lock));
HW2/account.c:    g_list_insert_sorted(globals->accounts, acnt, account_compare_ids);
HW2/account.c:    globals->num_accounts++;
HW2/account.c:    rwlock_release_write(&(globals->account_lock));
HW2/account.c:    fprintf(globals->log_file, "%d: New account id is %d with password %d and initial balance %d\n", atm_id, id, pass, initial_amount);
HW2/account.c:    fprintf(globals->log_file, "%s: Account %d new balance is %d after %d $ was deposited\n", atm_id, id, balance, amount);
HW2/account.c:        fprintf(globals->log_file, "Error %d: Your transaction failed - account id %d balance is lower than %d\n", atm_id, id, amount);
HW2/account.c:    fprintf(globals->log_file, "%s: Account %d new balance is %d after %d $ was withdrawn\n", atm_id, id, balance, amount);
HW2/account.c:    fprintf(globals->log_file, "%d: Account %d balance is %d\n", atm_id, id, balance);
HW2/account.c:    rwlock_acquire_write(&(globals->account_lock));
HW2/account.c:    g_list_remove(globals->accounts, acnt);
HW2/account.c:    globals->num_accounts--;
HW2/account.c:    rwlock_release_write(&(globals->account_lock));
HW2/account.c:    fprintf(globals->log_file, "%d: Account %d is now closed. Balance was %d\n", atm_id, id, balance);
HW2/account.c:        fprintf(globals->log_file, "Error %d: Your transaction failed - account id %d balance is lower than %d\n", atm_id, id, amount);
HW2/account.c:    fprintf(globals->log_file, "%d: Transfer <amount> from account <source account> to account <target account> new account balance is <source account balance> new target account balance is <target account balance>\n",
HW2/account.c://     rwlock_acquire_read(&(globals->account_lock));
HW2/account.c://     for (int i = 0; i < globals->num_accounts; i++){
HW2/account.c://         account *acnt = (account*)g_list_nth_data(globals->accounts, i);
HW2/account.c://     for (int i = 0; i < globals->num_accounts; i++){
HW2/account.c://         account *acnt = (account*)g_list_nth_data(globals->accounts, i);
HW2/account.c://     rwlock_release_read(&(globals->account_lock));
HW2/account.c://     rwlock_acquire_write(&(globals->account_lock));
HW2/account.c://     for (int i = 0; i < globals->num_accounts; i++){
HW2/account.c://         account *acnt = (account*)g_list_nth_data(globals->accounts, i);
HW2/account.c://     for (int i = 0; i < globals->num_accounts; i++){
HW2/account.c://         account *acnt = (account*)g_list_nth_data(globals->accounts, i);
HW2/account.c://     rwlock_release_write(&(globals->account_lock));
HW2/account.c:    rwlock_acquire_write(&(globals->account_lock));
HW2/account.c:    for (int i = 0; i < globals->num_accounts; i++){
HW2/account.c:        account *acnt = (account*)g_list_nth_data(globals->accounts, i);
HW2/account.c:    for (int i = 0; i < globals->num_accounts; i++){
HW2/account.c:        account *acnt = (account*)g_list_nth_data(globals->accounts, i);
HW2/account.c:    rwlock_release_write(&(globals->account_lock));
HW2/atm.c:    globals->atms[atm->id] = NULL;
HW2/atm.c:    if (target_id > globals->num_atms)
HW2/atm.c:        fprintf(globals->log_file, "Error %d: Your delete operation failed - ATM ID %d does not exist\n", source_id, target_id);
HW2/atm.c:    rwlock_acquire_write(&(globals->delete_lock));
HW2/atm.c:    globals->delete_requests = g_list_append(globals->delete_requests, delete_req);
HW2/atm.c:    rwlock_release_write(&(globals->delete_lock));
HW2/bank.c:    globals->atm_threads = MALLOC_VALIDATED(pthread_t ,sizeof(pthread_t) * (argc)); // zero is not used
HW2/bank.c:    globals->atms = MALLOC_VALIDATED(struct atm, sizeof(struct atm) * (argc)); // zero is not used
HW2/bank.c:    globals->num_atms = argc - 1;
HW2/bank.c:        globals->atms[i] = new_atm;
HW2/bank.c:        if (pthread_create(&globals->atm_threads[i], NULL, run_atm, new_atm) != 0)
HW2/bank.c:    globals->bank_thread = MALLOC_VALIDATED(pthread_t ,sizeof(pthread_t));
HW2/bank.c:    if (pthread_create(&globals->bank_thread, NULL, run_bank, NULL) != 0)
HW2/bank.c:        pthread_join(globals->atm_threads[i], NULL);
HW2/bank.c:    pthread_join(globals->bank_thread, NULL);
HW2/bank.c:    while(finished < globals->num_atms){
HW2/bank.c:        for (l = globals->accounts; l != NULL; l = l->next)
HW2/bank.c:    globals->bank_account->balance += commission;
HW2/bank.c:    fprintf(globals->log_file ,"Bank: commissions of %d %% were charged, bank gained %d from account %d\n",
HW2/bank.c:    rwlock_acquire_write(&(globals->delete_lock));
HW2/bank.c:    for (l = globals->delete_requests; l != NULL; l = l->next)
HW2/bank.c:        int target_atm = globals->atms[curr_delete_req->target_id];
HW2/bank.c:            fprintf(globals->log_file, "Error %d: Your close operation failed - ATM ID %d is already in a closed state\n", globals->delete_requests[i].source_id, i);
HW2/bank.c:        rwlock_acquire_write(&(globals->delete_lock));
HW2/bank.c:        globals->delete_requests = g_list_remove(globals->delete_requests, curr_delete_req);
HW2/bank.c:        rwlock_release_write(&(globals->delete_lock));
HW2/bank.c:    for (int i = 1; i <= globals->num_atms; i++){
HW2/bank.c:        atm_t atm = globals->atms[i];
HW2/bank.c:            pthread_join(globals->atm_threads[i], NULL);
HW2/bank.c:            globals->atms[i] = NULL;
HW2/bank.c:            fprintf(globals->log_file, "Bank: ATM %d closed %d successfully\n", atm_delete_req->source_id ,atm_delete_req->target_id);
HW2/utils.h:    globals->accounts = NULL;
HW2/utils.h:    globals->atms = NULL;
HW2/utils.h:    globals->num_accounts = 0;
HW2/utils.h:    rwlock_init(&(globals->account_lock));
HW2/utils.h:    rwlock_init(&(globals->atm_lock));
HW2/utils.h:    rwlock_init(&(globals->delete_lock));
HW2/utils.h:    globals->num_atms = 0;
HW2/utils.h:    globals->bank_account = account_init(0, 0, 0); // bank account
HW2/utils.h:    rwlock_init(&(globals->log_lock));
HW2/utils.h:    globals->log_file = "log.txt";
HW2/utils.h:    if (access(globals->log_file, F_OK) != -1) {
HW2/utils.h:        remove(globals->log_file);
HW2/utils.h:    FILE *log_file = fopen(globals->log_file, "w");
HW2/utils.h:    globals->atm_threads = NULL;
HW2/utils.h:    globals->bank_thread = NULL;
HW2/utils.h:    globals->delete_requests = NULL;
HW2/utils.h:    g_list_free_full(globals->accounts, free);
HW2/utils.h:    g_list_free_full(globals->delete_requests, free);
HW2/utils.h:    for (int i = 0; i < globals->num_atms; i++) {
HW2/utils.h:        destroy_atm(globals->atms[i]);
HW2/utils.h:    rwlock_destroy(&(globals->log_lock));
HW2/utils.h:    rwlock_destroy(&(globals->atm_lock));
HW2/utils.h:    rwlock_destroy(&(globals->account_lock));
HW2/utils.h:    if (globals->bank_account != NULL) {
HW2/utils.h:        account_free(globals->bank_account);
HW2/utils.h:        globals->bank_account = NULL;
HW2/utils.h:    if (globals->atm_threads != NULL) {
HW2/utils.h:        free(globals->atm_threads);
HW2/utils.h:        globals->atm_threads = NULL;
HW2/utils.h:    if (globals->bank_thread != NULL) {
HW2/utils.h:        free(globals->bank_thread);
HW2/utils.h:        globals->bank_thread = NULL;
HW2/utils.h:    if (globals->log_file != NULL) {
HW2/utils.h:        free(globals->log_file);
HW2/utils.h:        globals->log_file = NULL;
HW2/utils.h:    rwlock_acquire_write(&(globals->log_lock));
HW2/utils.h:    rwlock_release_write(&(globals->log_lock));
